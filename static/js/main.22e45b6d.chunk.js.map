{"version":3,"sources":["components/Login.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","TextField","id","label","Button","onClick","login","variant","color","style","width","Dashboard","state","checkedA","checkedB","handleChange","name","event","setState","target","checked","className","Card","CardContent","Typography","gutterBottom","component","CardActions","Switch","this","onChange","value","inputProps","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","select","Component","App","show","handleClick","AppBar","position","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAiCeA,EA9BD,SAACC,GACb,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,cAER,6BACA,kBAACF,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,cAER,6BACA,6BACA,kBAACC,EAAA,EAAD,CAAQC,QAASL,EAAMM,MAAOC,QAAQ,YAAYC,MAAM,UAAUC,MAAO,CAACC,MAAO,UAAjF,W,4RCkESC,E,2MA7EbC,MAAQ,CACNC,UAAU,EACVC,UAAU,G,EAGZC,aAAe,SAACC,GAAD,OAAU,SAAAC,GACvB,EAAKC,S,yVAAL,IAAmB,EAAKN,MAAxB,eAAgCI,EAAOC,EAAME,OAAOC,a,wEAIpD,OACE,yBAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,QACd,kBAACE,EAAA,EAAD,CAAaF,UAAU,cACrB,kBAACG,EAAA,EAAD,CAAYhB,MAAM,gBAAgBiB,cAAY,GAA9C,eAGA,kBAACD,EAAA,EAAD,CAAYjB,QAAQ,KAAKmB,UAAU,OAEnC,kBAACF,EAAA,EAAD,CAAYjB,QAAQ,QAAQmB,UAAU,KAAtC,mDAIF,kBAACC,EAAA,EAAD,CAAaN,UAAU,UACvB,kBAACO,EAAA,EAAD,CACIR,QAASS,KAAKjB,MAAMC,SACpBiB,SAAUD,KAAKd,aAAa,YAC5BgB,MAAM,WACNC,WAAY,CAAE,aAAc,0BAIlC,kBAACV,EAAA,EAAD,CAAMD,UAAU,QACd,kBAACE,EAAA,EAAD,CAAaF,UAAU,cACrB,kBAACG,EAAA,EAAD,CAAYhB,MAAM,gBAAgBiB,cAAY,GAA9C,iBAGA,kBAACD,EAAA,EAAD,CAAYjB,QAAQ,KAAKmB,UAAU,OAEnC,kBAACF,EAAA,EAAD,CAAYjB,QAAQ,QAAQmB,UAAU,KAAtC,4DAIF,kBAACC,EAAA,EAAD,CAAaN,UAAU,UACvB,kBAACY,EAAA,EAAD,CACEC,aAAc,GACdC,kBAAkB,OAClBC,KAAM,GACNC,OAAK,EACLC,IAAK,GACLC,IAAK,QAIT,kBAACjB,EAAA,EAAD,CAAMD,UAAU,QACd,kBAACE,EAAA,EAAD,CAAaF,UAAU,cACrB,kBAACG,EAAA,EAAD,CAAYhB,MAAM,gBAAgBiB,cAAY,GAA9C,iBAGA,kBAACD,EAAA,EAAD,CAAYjB,QAAQ,KAAKmB,UAAU,OAEnC,kBAACF,EAAA,EAAD,CAAYjB,QAAQ,QAAQmB,UAAU,KAAtC,oEAIF,kBAACC,EAAA,EAAD,CAAaN,UAAU,UACvB,kBAACpB,EAAA,EAAD,CAAWoB,UAAU,WACnBmB,QAAM,EACNrC,MAAM,kB,GArEMsC,a,gBC+CTC,E,2MA5Cb9B,MAAQ,CACN+B,MAAM,G,EAGRC,YAAc,WACZ,EAAK1B,SAAS,CAAEyB,MAAO,EAAK/B,MAAM+B,Q,wEAKpC,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACwB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACvB,EAAA,EAAD,CAAYjB,QAAQ,MAApB,gBAMLsB,KAAKjB,MAAM+B,KACV,6BACA,kBAAC,EAAD,KACA,4BAAQtC,QAASwB,KAAKe,cADtB,UAMA,kBAAC,EAAD,CAAOtC,MAAOuB,KAAKe,mB,GA/BTH,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.22e45b6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TextField, Button } from '@material-ui/core';\n\nconst Login = (props) => {\n  return(\n    <div>\n      <TextField\n        id=\"standard-name\"\n        label=\"Username*\"\n      />\n      <br></br>\n      <TextField\n        id=\"standard-name\"\n        label=\"Password*\"\n      />\n      <br></br>\n      <br></br>\n      <Button onClick={props.login} variant=\"contained\" color=\"primary\" style={{width: \"180px\"}}>\n        LOGIN\n      </Button>\n    </div>\n  )\n}\n\n\n\n\n\n\n\n\n\n\nexport default Login;","import React, { Component } from 'react';\nimport { Switch, Card, CardContent, CardActions, Typography, Slider, TextField, MenuItem } from '@material-ui/core'\n\n\n\nclass Dashboard extends Component {\n  state = {\n    checkedA: true,\n    checkedB: true,\n  }\n\n  handleChange = (name) => event => {\n    this.setState({ ...this.state, [name]: event.target.checked });\n  }\n\n  render() {\n    return (\n      <div className=\"cardControl\">\n        <Card className=\"card\">\n          <CardContent className=\"insideCard\">\n            <Typography color=\"textSecondary\" gutterBottom>\n              Online Mode\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Is this application connected to the internet?\n            </Typography>\n          </CardContent>\n          <CardActions className=\"switch\">\n          <Switch\n              checked={this.state.checkedA}\n              onChange={this.handleChange('checkedA')}\n              value=\"checkedA\"\n              inputProps={{ 'aria-label': 'secondary checkbox' }}\n            />\n          </CardActions>\n        </Card>\n        <Card className=\"card\">\n          <CardContent className=\"insideCard\">\n            <Typography color=\"textSecondary\" gutterBottom>\n              Master Volume\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Overrides all other sound settings in this application.\n            </Typography>\n          </CardContent>\n          <CardActions className=\"switch\">\n          <Slider\n            defaultValue={30}\n            valueLabelDisplay=\"auto\"\n            step={10}\n            marks\n            min={10}\n            max={110}\n          />\n          </CardActions>\n        </Card>\n        <Card className=\"card\">\n          <CardContent className=\"insideCard\">\n            <Typography color=\"textSecondary\" gutterBottom>\n              Sound Quality\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Manually control the music quality in event of poor connection.\n            </Typography>\n          </CardContent>\n          <CardActions className=\"switch\">\n          <TextField className=\"dropDown\"\n            select\n            label=\"Normal\">\n          </TextField>\n          </CardActions>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './components/Login'\nimport Dashboard from './components/Dashboard';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nclass App extends Component {\n\n  state = {\n    show: false\n  }\n\n  handleClick = () => {\n    this.setState({ show: !this.state.show })\n  }\n\n\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Music App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </header>\n      {this.state.show ? (\n        <div>\n        <Dashboard>\n        <button onClick={this.handleClick}></button>\n          Login\n        </Dashboard>\n        </div>\n      ) : (\n        <Login login={this.handleClick}/>\n\n      )\n      }\n    </div>\n  );\n  }\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}